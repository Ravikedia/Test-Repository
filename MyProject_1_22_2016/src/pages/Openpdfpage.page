<apex:page controller="Pdfgenerate" sidebar="false"  showHeader="false">

<head>
       <!-- <title>Minimal pdf.js text-selection demo</title>
        <link href="css/minimal.css" rel="stylesheet" media="screen" />
        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.1/jquery.min.js"></script>
        <script src="js/pdf.js" type="text/javascript"></script>
        <script src="js/textlayerbuilder.js" type="text/javascript"></script>
        <script src="js/minimal.js" type="text/javascript"></script>-->
   
        <apex:stylesheet value="{!$Resource.firstcss}" />
        <apex:includeScript value="{!$Resource.pdf}"/>
        <apex:includeScript value="{!$Resource.textlayerbuilder}"/>
       <!-- <apex:includeScript value="{!$Resource.minimal}"/>-->
            <script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.1/jquery.min.js"></script>
    </head>
   <style>
   .pdf-content{
   margin-left: 6%;
   margin-top : 3%;
   border: 3px solid #000000;
   height:900px !important;
   overflow: auto;

   }
   .textLayer{
   position: inherit;
   height:0px !important;
   }
   
   
     canvas {
         border: 1px solid rgb(233, 227, 236);
        }
   </style>

    <script>
    
window.onload = function () {

    
 
    var pdfBase64="{!base64data}"
    var scale = 1.5; //Set this to whatever you want. This is basically the "zoom" factor for the PDF.

    /**
     * Converts a base64 string into a Uint8Array
     */
    function base64ToUint8Array(base64) {
        var raw = atob(base64); //This is a native function that decodes a base64-encoded string.
        var uint8Array = new Uint8Array(new ArrayBuffer(raw.length));
        for (var i = 0; i < raw.length; i++) {
            uint8Array[i] = raw.charCodeAt(i);
        }

        return uint8Array;
    }

    function loadPdf(pdfData) {
        PDFJS.disableWorker = true; //Not using web workers. Not disabling results in an error. This line is
        //missing in the example code for rendering a pdf.

        var pdf = PDFJS.getDocument(pdfData);
        pdf.then(renderPdf);
    }

    function renderPdf(pdf) 
    {
        for(var i=0; i<1000; i++)
        {
        pdf.getPage(i).then(renderPage);
        }
    }

    function renderPage(page) {
        var viewport = page.getViewport(scale);
        var $canvas = jQuery("<canvas></canvas>");

        //Set the canvas height and width to the height and width of the viewport
        var canvas = $canvas.get(0);
        var context = canvas.getContext("2d");
        canvas.height = viewport.height;
        canvas.width = viewport.width;

        //Append the canvas to the pdf container div
        var $pdfContainer = jQuery("#pdfContainer");
        $pdfContainer.css("height", canvas.height + "px").css("width", canvas.width + "px");
        $pdfContainer.append($canvas);

        //The following few lines of code set up scaling on the context if we are on a HiDPI display
        var outputScale = getOutputScale();
        if (outputScale.scaled) {
            var cssScale = 'scale(' + (1 / outputScale.sx) + ', ' +
                (1 / outputScale.sy) + ')';
            CustomStyle.setProp('transform', canvas, cssScale);
            CustomStyle.setProp('transformOrigin', canvas, '0% 0%');

            if ($textLayerDiv.get(0)) {
                CustomStyle.setProp('transform', $textLayerDiv.get(0), cssScale);
                CustomStyle.setProp('transformOrigin', $textLayerDiv.get(0), '0% 0%');
            }
        }

        context._scaleX = outputScale.sx;
        context._scaleY = outputScale.sy;
        if (outputScale.scaled) {
            context.scale(outputScale.sx, outputScale.sy);
        }

        var canvasOffset = $canvas.offset();
        var $textLayerDiv = jQuery("<div />")
            .addClass("textLayer")
            .css("height", viewport.height + "px")
            .css("width", viewport.width + "px")
            .offset({
                top: canvasOffset.top,
                left: canvasOffset.left
            });

        $pdfContainer.append($textLayerDiv);

        page.getTextContent().then(function (textContent) {
            var textLayer = new TextLayerBuilder($textLayerDiv.get(0), 0); //The second zero is an index identifying
            //the page. It is set to page.number - 1.
            textLayer.setTextContent(textContent);

            var renderContext = {
                canvasContext: context,
                viewport: viewport,
               <!-- textLayer: textLayer-->
            };

            page.render(renderContext);
       
        });
    }

    var pdfData = base64ToUint8Array(pdfBase64);
    loadPdf(pdfData);
    
 
};

</script>

   
<html>
    
    <body>
       <!-- This is a minimal pdf.js text-selection demo. The existing minimal-example shows you how to render a PDF, but not
        how to enable text-selection. This example shows you how to do both. <br /><br />-->
        <div id="pdfContainer" class = "pdf-content">
        </div>
    </body>
</html>

<apex:form >
<apex:inputFile value="{!file}" /> 
<apex:commandButton action="{!pdfgenerate}"  value="Generate pdf file" />
</apex:form>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>


</apex:page>